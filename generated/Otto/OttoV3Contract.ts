// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseAttributesChanged extends ethereum.Event {
  get params(): BaseAttributesChanged__Params {
    return new BaseAttributesChanged__Params(this);
  }
}

export class BaseAttributesChanged__Params {
  _event: BaseAttributesChanged;

  constructor(event: BaseAttributesChanged) {
    this._event = event;
  }

  get ottoId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get attrs_(): Array<i32> {
    return this._event.parameters[1].value.toI32Array();
  }
}

export class BaseURIChanged extends ethereum.Event {
  get params(): BaseURIChanged__Params {
    return new BaseURIChanged__Params(this);
  }
}

export class BaseURIChanged__Params {
  _event: BaseURIChanged;

  constructor(event: BaseURIChanged) {
    this._event = event;
  }

  get sender_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseURI_(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EpochBoostsChanged extends ethereum.Event {
  get params(): EpochBoostsChanged__Params {
    return new EpochBoostsChanged__Params(this);
  }
}

export class EpochBoostsChanged__Params {
  _event: EpochBoostsChanged;

  constructor(event: EpochBoostsChanged) {
    this._event = event;
  }

  get ottoId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get epoch_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get attrs_(): Array<i32> {
    return this._event.parameters[2].value.toI32Array();
  }
}

export class ItemEquipped extends ethereum.Event {
  get params(): ItemEquipped__Params {
    return new ItemEquipped__Params(this);
  }
}

export class ItemEquipped__Params {
  _event: ItemEquipped;

  constructor(event: ItemEquipped) {
    this._event = event;
  }

  get ottoId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ItemTookOff extends ethereum.Event {
  get params(): ItemTookOff__Params {
    return new ItemTookOff__Params(this);
  }
}

export class ItemTookOff__Params {
  _event: ItemTookOff;

  constructor(event: ItemTookOff) {
    this._event = event;
  }

  get ottoId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ItemUsed extends ethereum.Event {
  get params(): ItemUsed__Params {
    return new ItemUsed__Params(this);
  }
}

export class ItemUsed__Params {
  _event: ItemUsed;

  constructor(event: ItemUsed) {
    this._event = event;
  }

  get ottoId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenPortal extends ethereum.Event {
  get params(): OpenPortal__Params {
    return new OpenPortal__Params(this);
  }
}

export class OpenPortal__Params {
  _event: OpenPortal;

  constructor(event: OpenPortal) {
    this._event = event;
  }

  get sender_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get legendary_(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SummonOtto extends ethereum.Event {
  get params(): SummonOtto__Params {
    return new SummonOtto__Params(this);
  }
}

export class SummonOtto__Params {
  _event: SummonOtto;

  constructor(event: SummonOtto) {
    this._event = event;
  }

  get sender_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get legendary_(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TraitsChanged extends ethereum.Event {
  get params(): TraitsChanged__Params {
    return new TraitsChanged__Params(this);
  }
}

export class TraitsChanged__Params {
  _event: TraitsChanged;

  constructor(event: TraitsChanged) {
    this._event = event;
  }

  get tokenId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get arr_(): Array<i32> {
    return this._event.parameters[1].value.toI32Array();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OttoV3Contract__infosResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getMintAt(): BigInt {
    return this.value0;
  }

  getCanOpenAt(): BigInt {
    return this.value1;
  }

  getSummonAt(): BigInt {
    return this.value2;
  }

  getBirthday(): BigInt {
    return this.value3;
  }

  getTraits(): BigInt {
    return this.value4;
  }

  getPortalStatus(): i32 {
    return this.value5;
  }

  getLegendary(): boolean {
    return this.value6;
  }
}

export class OttoV3Contract extends ethereum.SmartContract {
  static bind(address: Address): OttoV3Contract {
    return new OttoV3Contract("OttoV3Contract", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MANAGER_ROLE(): Bytes {
    let result = super.call("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseAttributesOf(tokenId_: BigInt): Array<i32> {
    let result = super.call(
      "baseAttributesOf",
      "baseAttributesOf(uint256):(int16[8])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return result[0].toI32Array();
  }

  try_baseAttributesOf(tokenId_: BigInt): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "baseAttributesOf",
      "baseAttributesOf(uint256):(int16[8])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  canOpenAt(tokenId_: BigInt): BigInt {
    let result = super.call("canOpenAt", "canOpenAt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_canOpenAt(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("canOpenAt", "canOpenAt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  candidates(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "candidates",
      "candidates(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_candidates(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "candidates",
      "candidates(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  candidatesOf(tokenId_: BigInt): Array<BigInt> {
    let result = super.call(
      "candidatesOf",
      "candidatesOf(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return result[0].toBigIntArray();
  }

  try_candidatesOf(tokenId_: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "candidatesOf",
      "candidatesOf(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  decayTarget(): BigInt {
    let result = super.call("decayTarget", "decayTarget():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decayTarget(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decayTarget", "decayTarget():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochBoostOf(ottoId_: BigInt, epoch_: BigInt): Array<i32> {
    let result = super.call(
      "epochBoostOf",
      "epochBoostOf(uint256,uint32):(int16[9])",
      [
        ethereum.Value.fromUnsignedBigInt(ottoId_),
        ethereum.Value.fromUnsignedBigInt(epoch_)
      ]
    );

    return result[0].toI32Array();
  }

  try_epochBoostOf(
    ottoId_: BigInt,
    epoch_: BigInt
  ): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "epochBoostOf",
      "epochBoostOf(uint256,uint32):(int16[9])",
      [
        ethereum.Value.fromUnsignedBigInt(ottoId_),
        ethereum.Value.fromUnsignedBigInt(epoch_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  epochBoosts(param0: BigInt, param1: BigInt, param2: BigInt): i32 {
    let result = super.call(
      "epochBoosts",
      "epochBoosts(uint256,uint32,uint256):(int16)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toI32();
  }

  try_epochBoosts(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "epochBoosts",
      "epochBoosts(uint256,uint32,uint256):(int16)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  equipable(ottoId_: BigInt, itemId_: BigInt): boolean {
    let result = super.call("equipable", "equipable(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(ottoId_),
      ethereum.Value.fromUnsignedBigInt(itemId_)
    ]);

    return result[0].toBoolean();
  }

  try_equipable(
    ottoId_: BigInt,
    itemId_: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "equipable",
      "equipable(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(ottoId_),
        ethereum.Value.fromUnsignedBigInt(itemId_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exists(tokenId_: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBoolean();
  }

  try_exists(tokenId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  genderOf(tokenId_: BigInt): i32 {
    let result = super.call("genderOf", "genderOf(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toI32();
  }

  try_genderOf(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("genderOf", "genderOf(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  infos(param0: BigInt): OttoV3Contract__infosResult {
    let result = super.call(
      "infos",
      "infos(uint256):(uint256,uint256,uint256,uint256,uint256,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OttoV3Contract__infosResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toBoolean()
    );
  }

  try_infos(param0: BigInt): ethereum.CallResult<OttoV3Contract__infosResult> {
    let result = super.tryCall(
      "infos",
      "infos(uint256):(uint256,uint256,uint256,uint256,uint256,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OttoV3Contract__infosResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toBoolean()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  legendary(tokenId_: BigInt): boolean {
    let result = super.call("legendary", "legendary(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBoolean();
  }

  try_legendary(tokenId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("legendary", "legendary(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxBatch(): BigInt {
    let result = super.call("maxBatch", "maxBatch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxBatch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxBatch", "maxBatch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextOwnerToExplicitlySet(): BigInt {
    let result = super.call(
      "nextOwnerToExplicitlySet",
      "nextOwnerToExplicitlySet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextOwnerToExplicitlySet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextOwnerToExplicitlySet",
      "nextOwnerToExplicitlySet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numericTraitsOf(tokenId_: BigInt): BigInt {
    let result = super.call(
      "numericTraitsOf",
      "numericTraitsOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return result[0].toBigInt();
  }

  try_numericTraitsOf(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numericTraitsOf",
      "numericTraitsOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    from_: Address,
    itemId_: BigInt,
    value_: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from_),
        ethereum.Value.fromUnsignedBigInt(itemId_),
        ethereum.Value.fromUnsignedBigInt(value_),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    from_: Address,
    itemId_: BigInt,
    value_: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from_),
        ethereum.Value.fromUnsignedBigInt(itemId_),
        ethereum.Value.fromUnsignedBigInt(value_),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  openPeriod(): BigInt {
    let result = super.call("openPeriod", "openPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openPeriod", "openPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownedItemsOf(tokenId_: BigInt): Array<BigInt> {
    let result = super.call(
      "ownedItemsOf",
      "ownedItemsOf(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return result[0].toBigIntArray();
  }

  try_ownedItemsOf(tokenId_: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "ownedItemsOf",
      "ownedItemsOf(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  portalStatusOf(tokenId_: BigInt): i32 {
    let result = super.call(
      "portalStatusOf",
      "portalStatusOf(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return result[0].toI32();
  }

  try_portalStatusOf(tokenId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "portalStatusOf",
      "portalStatusOf(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rawTraitsOf(tokenId_: BigInt): Array<i32> {
    let result = super.call(
      "rawTraitsOf",
      "rawTraitsOf(uint256):(uint16[16])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return result[0].toI32Array();
  }

  try_rawTraitsOf(tokenId_: BigInt): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "rawTraitsOf",
      "rawTraitsOf(uint256):(uint16[16])",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toNumericTraits(arr_: Array<i32>): BigInt {
    let result = super.call(
      "toNumericTraits",
      "toNumericTraits(uint16[16]):(uint256)",
      [ethereum.Value.fromI32Array(arr_)]
    );

    return result[0].toBigInt();
  }

  try_toNumericTraits(arr_: Array<i32>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toNumericTraits",
      "toNumericTraits(uint16[16]):(uint256)",
      [ethereum.Value.fromI32Array(arr_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalMintable(): BigInt {
    let result = super.call("totalMintable", "totalMintable():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalMintable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMintable",
      "totalMintable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  traitsOf(tokenId_: BigInt): Array<i32> {
    let result = super.call("traitsOf", "traitsOf(uint256):(uint16[16])", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toI32Array();
  }

  try_traitsOf(tokenId_: BigInt): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("traitsOf", "traitsOf(uint256):(uint16[16])", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DevSummonCall extends ethereum.Call {
  get inputs(): DevSummonCall__Inputs {
    return new DevSummonCall__Inputs(this);
  }

  get outputs(): DevSummonCall__Outputs {
    return new DevSummonCall__Outputs(this);
  }
}

export class DevSummonCall__Inputs {
  _call: DevSummonCall;

  constructor(call: DevSummonCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get traits_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get birthday_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get legendary_(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class DevSummonCall__Outputs {
  _call: DevSummonCall;

  constructor(call: DevSummonCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get maxBatchSize_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get collectionSize_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quantity_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get itemId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OpenPortalCall extends ethereum.Call {
  get inputs(): OpenPortalCall__Inputs {
    return new OpenPortalCall__Inputs(this);
  }

  get outputs(): OpenPortalCall__Outputs {
    return new OpenPortalCall__Outputs(this);
  }
}

export class OpenPortalCall__Inputs {
  _call: OpenPortalCall;

  constructor(call: OpenPortalCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get candidates_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get legendary_(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class OpenPortalCall__Outputs {
  _call: OpenPortalCall;

  constructor(call: OpenPortalCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetCanOpenAtCall extends ethereum.Call {
  get inputs(): SetCanOpenAtCall__Inputs {
    return new SetCanOpenAtCall__Inputs(this);
  }

  get outputs(): SetCanOpenAtCall__Outputs {
    return new SetCanOpenAtCall__Outputs(this);
  }
}

export class SetCanOpenAtCall__Inputs {
  _call: SetCanOpenAtCall;

  constructor(call: SetCanOpenAtCall) {
    this._call = call;
  }

  get ts_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokendIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetCanOpenAtCall__Outputs {
  _call: SetCanOpenAtCall;

  constructor(call: SetCanOpenAtCall) {
    this._call = call;
  }
}

export class SetDecayTargetCall extends ethereum.Call {
  get inputs(): SetDecayTargetCall__Inputs {
    return new SetDecayTargetCall__Inputs(this);
  }

  get outputs(): SetDecayTargetCall__Outputs {
    return new SetDecayTargetCall__Outputs(this);
  }
}

export class SetDecayTargetCall__Inputs {
  _call: SetDecayTargetCall;

  constructor(call: SetDecayTargetCall) {
    this._call = call;
  }

  get ts_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDecayTargetCall__Outputs {
  _call: SetDecayTargetCall;

  constructor(call: SetDecayTargetCall) {
    this._call = call;
  }
}

export class SetOpenPeriodCall extends ethereum.Call {
  get inputs(): SetOpenPeriodCall__Inputs {
    return new SetOpenPeriodCall__Inputs(this);
  }

  get outputs(): SetOpenPeriodCall__Outputs {
    return new SetOpenPeriodCall__Outputs(this);
  }
}

export class SetOpenPeriodCall__Inputs {
  _call: SetOpenPeriodCall;

  constructor(call: SetOpenPeriodCall) {
    this._call = call;
  }

  get openPeriod_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOpenPeriodCall__Outputs {
  _call: SetOpenPeriodCall;

  constructor(call: SetOpenPeriodCall) {
    this._call = call;
  }
}

export class SetTraitCodeCall extends ethereum.Call {
  get inputs(): SetTraitCodeCall__Inputs {
    return new SetTraitCodeCall__Inputs(this);
  }

  get outputs(): SetTraitCodeCall__Outputs {
    return new SetTraitCodeCall__Outputs(this);
  }
}

export class SetTraitCodeCall__Inputs {
  _call: SetTraitCodeCall;

  constructor(call: SetTraitCodeCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slot_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get code_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetTraitCodeCall__Outputs {
  _call: SetTraitCodeCall;

  constructor(call: SetTraitCodeCall) {
    this._call = call;
  }
}

export class SummonCall extends ethereum.Call {
  get inputs(): SummonCall__Inputs {
    return new SummonCall__Inputs(this);
  }

  get outputs(): SummonCall__Outputs {
    return new SummonCall__Outputs(this);
  }
}

export class SummonCall__Inputs {
  _call: SummonCall;

  constructor(call: SummonCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get candidateIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get birthday_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SummonCall__Outputs {
  _call: SummonCall;

  constructor(call: SummonCall) {
    this._call = call;
  }
}

export class TransferChildCall extends ethereum.Call {
  get inputs(): TransferChildCall__Inputs {
    return new TransferChildCall__Inputs(this);
  }

  get outputs(): TransferChildCall__Outputs {
    return new TransferChildCall__Outputs(this);
  }
}

export class TransferChildCall__Inputs {
  _call: TransferChildCall;

  constructor(call: TransferChildCall) {
    this._call = call;
  }

  get _fromTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _childContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _childTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferChildCall__Outputs {
  _call: TransferChildCall;

  constructor(call: TransferChildCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBaseAttributesCall extends ethereum.Call {
  get inputs(): UpdateBaseAttributesCall__Inputs {
    return new UpdateBaseAttributesCall__Inputs(this);
  }

  get outputs(): UpdateBaseAttributesCall__Outputs {
    return new UpdateBaseAttributesCall__Outputs(this);
  }
}

export class UpdateBaseAttributesCall__Inputs {
  _call: UpdateBaseAttributesCall;

  constructor(call: UpdateBaseAttributesCall) {
    this._call = call;
  }

  get ottoId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delta_(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class UpdateBaseAttributesCall__Outputs {
  _call: UpdateBaseAttributesCall;

  constructor(call: UpdateBaseAttributesCall) {
    this._call = call;
  }
}

export class UpdateEpochBoostCall extends ethereum.Call {
  get inputs(): UpdateEpochBoostCall__Inputs {
    return new UpdateEpochBoostCall__Inputs(this);
  }

  get outputs(): UpdateEpochBoostCall__Outputs {
    return new UpdateEpochBoostCall__Outputs(this);
  }
}

export class UpdateEpochBoostCall__Inputs {
  _call: UpdateEpochBoostCall;

  constructor(call: UpdateEpochBoostCall) {
    this._call = call;
  }

  get ottoId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get epoch_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get delta_(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class UpdateEpochBoostCall__Outputs {
  _call: UpdateEpochBoostCall;

  constructor(call: UpdateEpochBoostCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class UpgradeV3Call extends ethereum.Call {
  get inputs(): UpgradeV3Call__Inputs {
    return new UpgradeV3Call__Inputs(this);
  }

  get outputs(): UpgradeV3Call__Outputs {
    return new UpgradeV3Call__Outputs(this);
  }
}

export class UpgradeV3Call__Inputs {
  _call: UpgradeV3Call;

  constructor(call: UpgradeV3Call) {
    this._call = call;
  }

  get item_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeV3Call__Outputs {
  _call: UpgradeV3Call;

  constructor(call: UpgradeV3Call) {
    this._call = call;
  }
}
