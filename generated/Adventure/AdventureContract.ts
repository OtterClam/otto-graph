// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Departure extends ethereum.Event {
  get params(): Departure__Params {
    return new Departure__Params(this);
  }
}

export class Departure__Params {
  _event: Departure;

  constructor(event: Departure) {
    this._event = event;
  }

  get passId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ottoId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Finish extends ethereum.Event {
  get params(): Finish__Params {
    return new Finish__Params(this);
  }
}

export class Finish__Params {
  _event: Finish;

  constructor(event: Finish) {
    this._event = event;
  }

  get passId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ottoId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Revive extends ethereum.Event {
  get params(): Revive__Params {
    return new Revive__Params(this);
  }
}

export class Revive__Params {
  _event: Revive;

  constructor(event: Revive) {
    this._event = event;
  }

  get passId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ottoId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TcpChanged extends ethereum.Event {
  get params(): TcpChanged__Params {
    return new TcpChanged__Params(this);
  }
}

export class TcpChanged__Params {
  _event: TcpChanged;

  constructor(event: TcpChanged) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdventureContract__latestPassOfResultValue0Struct extends ethereum.Tuple {
  get locId(): BigInt {
    return this[0].toBigInt();
  }

  get ottoId(): BigInt {
    return this[1].toBigInt();
  }

  get departuredAt(): BigInt {
    return this[2].toBigInt();
  }

  get canFinishedAt(): BigInt {
    return this[3].toBigInt();
  }

  get finishedAt(): BigInt {
    return this[4].toBigInt();
  }

  get seed(): BigInt {
    return this[5].toBigInt();
  }

  get success(): boolean {
    return this[6].toBoolean();
  }

  get revived(): boolean {
    return this[7].toBoolean();
  }

  get rewards(): AdventureContract__latestPassOfResultValue0RewardsStruct {
    return changetype<AdventureContract__latestPassOfResultValue0RewardsStruct>(
      this[8].toTuple()
    );
  }
}

export class AdventureContract__latestPassOfResultValue0RewardsStruct extends ethereum.Tuple {
  get exp(): BigInt {
    return this[0].toBigInt();
  }

  get ap(): BigInt {
    return this[1].toBigInt();
  }

  get tcp(): BigInt {
    return this[2].toBigInt();
  }

  get items(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class AdventureContract__passResultValue0Struct extends ethereum.Tuple {
  get locId(): BigInt {
    return this[0].toBigInt();
  }

  get ottoId(): BigInt {
    return this[1].toBigInt();
  }

  get departuredAt(): BigInt {
    return this[2].toBigInt();
  }

  get canFinishedAt(): BigInt {
    return this[3].toBigInt();
  }

  get finishedAt(): BigInt {
    return this[4].toBigInt();
  }

  get seed(): BigInt {
    return this[5].toBigInt();
  }

  get success(): boolean {
    return this[6].toBoolean();
  }

  get revived(): boolean {
    return this[7].toBoolean();
  }

  get rewards(): AdventureContract__passResultValue0RewardsStruct {
    return changetype<AdventureContract__passResultValue0RewardsStruct>(
      this[8].toTuple()
    );
  }
}

export class AdventureContract__passResultValue0RewardsStruct extends ethereum.Tuple {
  get exp(): BigInt {
    return this[0].toBigInt();
  }

  get ap(): BigInt {
    return this[1].toBigInt();
  }

  get tcp(): BigInt {
    return this[2].toBigInt();
  }

  get items(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class AdventureContract extends ethereum.SmartContract {
  static bind(address: Address): AdventureContract {
    return new AdventureContract("AdventureContract", address);
  }

  CLAM(): Address {
    let result = super.call("CLAM", "CLAM():(address)", []);

    return result[0].toAddress();
  }

  try_CLAM(): ethereum.CallResult<Address> {
    let result = super.tryCall("CLAM", "CLAM():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FINISH_IMMEDIATELY_PRODUCT(): BigInt {
    let result = super.call(
      "FINISH_IMMEDIATELY_PRODUCT",
      "FINISH_IMMEDIATELY_PRODUCT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FINISH_IMMEDIATELY_PRODUCT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FINISH_IMMEDIATELY_PRODUCT",
      "FINISH_IMMEDIATELY_PRODUCT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ITEM(): Address {
    let result = super.call("ITEM", "ITEM():(address)", []);

    return result[0].toAddress();
  }

  try_ITEM(): ethereum.CallResult<Address> {
    let result = super.tryCall("ITEM", "ITEM():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MANAGER_ROLE(): Bytes {
    let result = super.call("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGER_ROLE", "MANAGER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONE_HOUR_POTION(): BigInt {
    let result = super.call(
      "ONE_HOUR_POTION",
      "ONE_HOUR_POTION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_HOUR_POTION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_HOUR_POTION",
      "ONE_HOUR_POTION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_HUNDRED_PERCENT(): BigInt {
    let result = super.call(
      "ONE_HUNDRED_PERCENT",
      "ONE_HUNDRED_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_HUNDRED_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_HUNDRED_PERCENT",
      "ONE_HUNDRED_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OTTO(): Address {
    let result = super.call("OTTO", "OTTO():(address)", []);

    return result[0].toAddress();
  }

  try_OTTO(): ethereum.CallResult<Address> {
    let result = super.tryCall("OTTO", "OTTO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  POTION_EFFECT_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "POTION_EFFECT_MANAGER_ROLE",
      "POTION_EFFECT_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_POTION_EFFECT_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "POTION_EFFECT_MANAGER_ROLE",
      "POTION_EFFECT_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RAND(): Address {
    let result = super.call("RAND", "RAND():(address)", []);

    return result[0].toAddress();
  }

  try_RAND(): ethereum.CallResult<Address> {
    let result = super.tryCall("RAND", "RAND():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  REVIVE_PRODUCT(): BigInt {
    let result = super.call("REVIVE_PRODUCT", "REVIVE_PRODUCT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REVIVE_PRODUCT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REVIVE_PRODUCT",
      "REVIVE_PRODUCT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SIX_HOUR_POTION(): BigInt {
    let result = super.call(
      "SIX_HOUR_POTION",
      "SIX_HOUR_POTION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SIX_HOUR_POTION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SIX_HOUR_POTION",
      "SIX_HOUR_POTION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STORE(): Address {
    let result = super.call("STORE", "STORE():(address)", []);

    return result[0].toAddress();
  }

  try_STORE(): ethereum.CallResult<Address> {
    let result = super.tryCall("STORE", "STORE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  THREE_HOUR_POTION(): BigInt {
    let result = super.call(
      "THREE_HOUR_POTION",
      "THREE_HOUR_POTION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_THREE_HOUR_POTION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "THREE_HOUR_POTION",
      "THREE_HOUR_POTION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accumulativeTcp(param0: Address): BigInt {
    let result = super.call(
      "accumulativeTcp",
      "accumulativeTcp(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_accumulativeTcp(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulativeTcp",
      "accumulativeTcp(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canFinishAt(ottoId_: BigInt): BigInt {
    let result = super.call("canFinishAt", "canFinishAt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(ottoId_)
    ]);

    return result[0].toBigInt();
  }

  try_canFinishAt(ottoId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canFinishAt",
      "canFinishAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(ottoId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestPassOf(
    ottoId_: BigInt
  ): AdventureContract__latestPassOfResultValue0Struct {
    let result = super.call(
      "latestPassOf",
      "latestPassOf(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,(uint32,uint32,uint32,uint256[])))",
      [ethereum.Value.fromUnsignedBigInt(ottoId_)]
    );

    return changetype<AdventureContract__latestPassOfResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_latestPassOf(
    ottoId_: BigInt
  ): ethereum.CallResult<AdventureContract__latestPassOfResultValue0Struct> {
    let result = super.tryCall(
      "latestPassOf",
      "latestPassOf(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,(uint32,uint32,uint32,uint256[])))",
      [ethereum.Value.fromUnsignedBigInt(ottoId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AdventureContract__latestPassOfResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pass(passId_: BigInt): AdventureContract__passResultValue0Struct {
    let result = super.call(
      "pass",
      "pass(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,(uint32,uint32,uint32,uint256[])))",
      [ethereum.Value.fromUnsignedBigInt(passId_)]
    );

    return changetype<AdventureContract__passResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_pass(
    passId_: BigInt
  ): ethereum.CallResult<AdventureContract__passResultValue0Struct> {
    let result = super.tryCall(
      "pass",
      "pass(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,(uint32,uint32,uint32,uint256[])))",
      [ethereum.Value.fromUnsignedBigInt(passId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AdventureContract__passResultValue0Struct>(value[0].toTuple())
    );
  }

  passIdTracker(): BigInt {
    let result = super.call("passIdTracker", "passIdTracker():(uint256)", []);

    return result[0].toBigInt();
  }

  try_passIdTracker(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "passIdTracker",
      "passIdTracker():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  restingUntil(param0: BigInt): BigInt {
    let result = super.call("restingUntil", "restingUntil(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_restingUntil(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "restingUntil",
      "restingUntil(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signer(): Address {
    let result = super.call("signer", "signer():(address)", []);

    return result[0].toAddress();
  }

  try_signer(): ethereum.CallResult<Address> {
    let result = super.tryCall("signer", "signer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedOttosOf(owner_: Address): Array<BigInt> {
    let result = super.call(
      "stakedOttosOf",
      "stakedOttosOf(address):(uint256[])",
      [ethereum.Value.fromAddress(owner_)]
    );

    return result[0].toBigIntArray();
  }

  try_stakedOttosOf(owner_: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "stakedOttosOf",
      "stakedOttosOf(address):(uint256[])",
      [ethereum.Value.fromAddress(owner_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usedSignatures(param0: Bytes): boolean {
    let result = super.call("usedSignatures", "usedSignatures(bytes):(bool)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_usedSignatures(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "usedSignatures",
      "usedSignatures(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DepartureCall extends ethereum.Call {
  get inputs(): DepartureCall__Inputs {
    return new DepartureCall__Inputs(this);
  }

  get outputs(): DepartureCall__Outputs {
    return new DepartureCall__Outputs(this);
  }
}

export class DepartureCall__Inputs {
  _call: DepartureCall;

  constructor(call: DepartureCall) {
    this._call = call;
  }

  get ottoId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get locId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get duration_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get inputs_(): Array<DepartureCallInputs_Struct> {
    return this._call.inputValues[3].value.toTupleArray<
      DepartureCallInputs_Struct
    >();
  }

  get sig_(): DepartureCallSig_Struct {
    return changetype<DepartureCallSig_Struct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class DepartureCall__Outputs {
  _call: DepartureCall;

  constructor(call: DepartureCall) {
    this._call = call;
  }
}

export class DepartureCallInputs_Struct extends ethereum.Tuple {
  get typ(): i32 {
    return this[0].toI32();
  }

  get itemId(): BigInt {
    return this[1].toBigInt();
  }

  get fromOttoId(): BigInt {
    return this[2].toBigInt();
  }
}

export class DepartureCallSig_Struct extends ethereum.Tuple {
  get nonce(): string {
    return this[0].toString();
  }

  get digest(): Bytes {
    return this[1].toBytes();
  }

  get signed(): Bytes {
    return this[2].toBytes();
  }
}

export class FinishCall extends ethereum.Call {
  get inputs(): FinishCall__Inputs {
    return new FinishCall__Inputs(this);
  }

  get outputs(): FinishCall__Outputs {
    return new FinishCall__Outputs(this);
  }
}

export class FinishCall__Inputs {
  _call: FinishCall;

  constructor(call: FinishCall) {
    this._call = call;
  }

  get ottoId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cooldown_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sr_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rewards_(): FinishCallRewards_Struct {
    return changetype<FinishCallRewards_Struct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get immediately_(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get potions_(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get sig_(): FinishCallSig_Struct {
    return changetype<FinishCallSig_Struct>(
      this._call.inputValues[6].value.toTuple()
    );
  }
}

export class FinishCall__Outputs {
  _call: FinishCall;

  constructor(call: FinishCall) {
    this._call = call;
  }
}

export class FinishCallRewards_Struct extends ethereum.Tuple {
  get exp(): BigInt {
    return this[0].toBigInt();
  }

  get ap(): BigInt {
    return this[1].toBigInt();
  }

  get tcp(): BigInt {
    return this[2].toBigInt();
  }

  get items(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class FinishCallSig_Struct extends ethereum.Tuple {
  get nonce(): string {
    return this[0].toString();
  }

  get digest(): Bytes {
    return this[1].toBytes();
  }

  get signed(): Bytes {
    return this[2].toBytes();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get rand_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get otto_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get item_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get clam_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get store_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get signer_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class ReviveCall extends ethereum.Call {
  get inputs(): ReviveCall__Inputs {
    return new ReviveCall__Inputs(this);
  }

  get outputs(): ReviveCall__Outputs {
    return new ReviveCall__Outputs(this);
  }
}

export class ReviveCall__Inputs {
  _call: ReviveCall;

  constructor(call: ReviveCall) {
    this._call = call;
  }

  get ottoId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReviveCall__Outputs {
  _call: ReviveCall;

  constructor(call: ReviveCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetSignerCall extends ethereum.Call {
  get inputs(): SetSignerCall__Inputs {
    return new SetSignerCall__Inputs(this);
  }

  get outputs(): SetSignerCall__Outputs {
    return new SetSignerCall__Outputs(this);
  }
}

export class SetSignerCall__Inputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }

  get signer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSignerCall__Outputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }
}

export class ShortenCooldownCall extends ethereum.Call {
  get inputs(): ShortenCooldownCall__Inputs {
    return new ShortenCooldownCall__Inputs(this);
  }

  get outputs(): ShortenCooldownCall__Outputs {
    return new ShortenCooldownCall__Outputs(this);
  }
}

export class ShortenCooldownCall__Inputs {
  _call: ShortenCooldownCall;

  constructor(call: ShortenCooldownCall) {
    this._call = call;
  }

  get ottoId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sec(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ShortenCooldownCall__Outputs {
  _call: ShortenCooldownCall;

  constructor(call: ShortenCooldownCall) {
    this._call = call;
  }
}

export class ShortenDurationCall extends ethereum.Call {
  get inputs(): ShortenDurationCall__Inputs {
    return new ShortenDurationCall__Inputs(this);
  }

  get outputs(): ShortenDurationCall__Outputs {
    return new ShortenDurationCall__Outputs(this);
  }
}

export class ShortenDurationCall__Inputs {
  _call: ShortenDurationCall;

  constructor(call: ShortenDurationCall) {
    this._call = call;
  }

  get ottoId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sec(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ShortenDurationCall__Outputs {
  _call: ShortenDurationCall;

  constructor(call: ShortenDurationCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class UseSpeedUpPotionsCall extends ethereum.Call {
  get inputs(): UseSpeedUpPotionsCall__Inputs {
    return new UseSpeedUpPotionsCall__Inputs(this);
  }

  get outputs(): UseSpeedUpPotionsCall__Outputs {
    return new UseSpeedUpPotionsCall__Outputs(this);
  }
}

export class UseSpeedUpPotionsCall__Inputs {
  _call: UseSpeedUpPotionsCall;

  constructor(call: UseSpeedUpPotionsCall) {
    this._call = call;
  }

  get ottoId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get potions_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UseSpeedUpPotionsCall__Outputs {
  _call: UseSpeedUpPotionsCall;

  constructor(call: UseSpeedUpPotionsCall) {
    this._call = call;
  }
}
